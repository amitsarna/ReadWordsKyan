{"version":3,"sources":["index.js"],"names":["Square","props","originalWordList","state","Words","slice","CurrentWords","ButtonText","StopWatchRunning","StartTime","Date","now","RunningTime","handleClick","bind","remainingWords","this","stopWatchRunning","buttonText","length","newWords","i","index","Math","floor","random","push","splice","setState","timer","setInterval","duration","clearInterval","items","entries","value","align","className","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oMAMMA,G,wDAOJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IANRC,iBAAoB,CAAC,MAAO,OAAQ,SAAU,MAAO,MAAO,QAAS,OAAQ,OAAQ,QAAS,MAAO,OAAQ,MAAO,QAAS,MACrH,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,MAAO,MAAO,IAAK,KAAM,OAAQ,MAC3G,MAAO,KAAM,MAAO,OAAQ,KAAM,KAAM,QAAS,MAAO,MAAO,OAAQ,KAAM,KAAM,MAAO,OAAQ,KAAM,KAC1G,KAAM,MAAO,QAKf,EAAKC,MACH,CACEC,MAAO,EAAKF,iBAAiBG,QAC7BC,aAAc,GACdC,WAAa,QACbC,kBAAmB,EACnBC,UAAYC,KAAKC,MACjBC,YAAc,KAElB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAZF,E,0DAiBlB,IAAD,OACMC,EAAiBC,KAAKb,MAAMC,MAC5Ba,EAAmBD,KAAKb,MAAMK,iBAC9BU,EAAa,OAEa,IAA1BH,EAAeI,OAEbF,GAEFA,GAAmB,EACnBC,EAAa,iCAKbD,GAAmB,EACnBF,EAAiBC,KAAKd,iBAAiBG,SAKzCY,GAAmB,EAGrB,IAAIG,EAAW,GAEf,GAAIL,EAAeI,OAAS,EAE1B,IAAK,IAAIE,EAAI,EAAGA,EAAI,IAAKA,EACzB,CACE,GAA8B,IAA1BN,EAAeI,OACnB,CACED,EAAa,OACb,MAGF,IAAII,EAAQC,KAAKC,MAAMD,KAAKE,SAAWV,EAAeI,QACtDC,EAASM,KAAKX,EAAeO,IAC7BP,EAAeY,OAAOL,EAAO,GAIjCN,KAAKY,UAAS,SAAAzB,GAaZ,OAXIc,IAAqB,EAAKd,MAAMK,kBAElC,EAAKoB,SAAS,CAAEnB,UAAWC,KAAKC,QAChC,EAAKkB,MAAQC,aAAY,WACvB,IAAIC,EAAWrB,KAAKC,MAAQ,EAAKR,MAAMM,UACvC,EAAKmB,SAAS,CAAEhB,YAAaW,KAAKC,MAAMO,EAAS,WAG3Cd,GACRe,cAAc,EAAKH,OAEd,CACPzB,MAAQW,EACRT,aAAec,EACfb,WAAaW,EACbV,iBAAkBS,Q,6CAMpBe,cAAchB,KAAKa,S,+BAMrB,IAHS,EAGHI,EAAQ,GAHL,cAKWjB,KAAKb,MAAMG,aAAa4B,WALnC,IAKT,2BAAuD,CAAC,IAA7CC,EAA4C,QACrDF,EAAMP,KAAK,yBAAKU,MAAM,UAAUD,EAAM,MAN/B,8BAQL,OACE,6BACGF,EACD,4BAAQI,UAAU,SAASC,QAAStB,KAAKH,aACtCG,KAAKb,MAAMI,YAEd,yBAAK6B,MAAM,UAAUpB,KAAKb,MAAMS,YAAhC,iB,GA1GW2B,IAAMC,YAkHzBC,IAASC,OACP,kBAAC1C,EAAD,MACA2C,SAASC,eAAe,U","file":"static/js/main.8fe81659.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n//import Speech from 'speak-tts';\nimport './index.css';\n\n\nclass Square extends React.Component {\n  \n  originalWordList =  [\"put\", \"will\", \"little\", \"out\", \"him\", \"could\", \"have\", \"with\", \"don't\", \"had\", \"what\", \"one\", \"there\", \"but\", \n          \"very\", \"just\", \"back\", \"about\", \"come\", \"went\", \"for\", \"some\", \"made\", \"the\", \"and\", \"a\", \"to\", \"said\", \"all\",\n        \"you\", \"me\", \"she\", \"come\", \"go\", \"of\", \"where\", \"was\", \"far\", \"away\", \"am\", \"we\", \"her\", \"they\", \"as\", \"be\",\n      \"at\", \"not\", \"then\"];\n\n  constructor(props) {\n    super(props);\n    \n    this.state = \n      { \n        Words: this.originalWordList.slice(),\n        CurrentWords: [],\n        ButtonText : \"Start\",\n        StopWatchRunning : false,\n        StartTime : Date.now(),\n        RunningTime : \"0\"\n      };\n    this.handleClick = this.handleClick.bind(this);\n    //this.speech.init();\n  }\n\n  handleClick()\n  {\n    var remainingWords = this.state.Words;\n    var stopWatchRunning = this.state.StopWatchRunning;\n    var buttonText = \"Next\"\n\n    if (remainingWords.length === 0)\n    {\n      if (stopWatchRunning)\n      {\n        stopWatchRunning = false;\n        buttonText = \"Well Done Kyan! Start Again?\";\n      }\n      else\n      {\n        // we're starting again\n        stopWatchRunning = true;\n        remainingWords = this.originalWordList.slice();\n      }\n    }\n    else\n    {\n      stopWatchRunning = true;\n    }\n    \n    var newWords = []\n    \n    if (remainingWords.length > 0)\n    {\n      for (var i = 0; i < 5; ++i)\n      {\n        if (remainingWords.length === 0)\n        {\n          buttonText = \"Done\";\n          break;\n        }\n\n        var index = Math.floor(Math.random() * remainingWords.length)\n        newWords.push(remainingWords[index]);\n        remainingWords.splice(index, 1);\n      }\n  }\n\n    this.setState(state => {\n      \n      if (stopWatchRunning && !this.state.StopWatchRunning)\n      {\n        this.setState({ StartTime: Date.now() });\n        this.timer = setInterval(() => {\n          var duration = Date.now() - this.state.StartTime\n          this.setState({ RunningTime: Math.floor(duration/1000) });\n        });\n      }\n      else if (!stopWatchRunning)\n        clearInterval(this.timer);\n      \n      return {\n      Words : remainingWords,\n      CurrentWords : newWords,\n      ButtonText : buttonText,\n      StopWatchRunning: stopWatchRunning\n    }});\n\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n\n\n  const items = []\n\n  for (const value of this.state.CurrentWords.entries()) {\n    items.push(<div align=\"center\">{value[1]}</div>)\n  }\n      return (\n        <div>\n          {items}\n          <button className=\"square\" onClick={this.handleClick}>\n            {this.state.ButtonText}\n          </button>\n          <div align=\"center\">{this.state.RunningTime} seconds</div>        \n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Square />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}